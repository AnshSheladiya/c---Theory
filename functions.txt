To perform any task, we can create function. 
A function can be called many times. 
It provides modularity(alag alag hovu) and code reusability.

Advantage of functions in C:
Reusability:you can call it many times. So we don't need to write the same code again and again.
Code optimization:It makes the code optimized, we don't need to write much code.
It reduces complexity of a big program and optimizes the code.

-----------------------------Types of Functions------------------------------------
1. Library Functions: are the functions which are declared in the C++ header files 
2.User-defined functions: are the functions which are created by the C++ programmer, so that he/she can use it many times.

The syntax of creating function:
return_type function_name(data_type parameter...)  
{    
//code to be executed    
}  

----------------------------two ways to pass value or data to function-------------------------------------------
call by value 
call by reference.
Original value is not modified in call by value but it is modified in call by reference.

--------------------------------Call by value --------------------------------------
In call by value, original value is not modified.
If you change the value of function parameter, it is changed for the current function only.
 It will not change the value of variable inside the caller method such as main().
In call by value, value being passed to the function is locally stored by the function parameter

exmple:
#include <iostream>  
using namespace std;  
void change(int data);  
int main()  
{  
int data = 3;  
change(data);  
cout << "Value of the data is: " << data<< endl;  //3
return 0;  
}  
void change(int data)  
{  
data = 5;  
}  

Output:
Value of the data is: 3

---------------------------------Call by reference----------------------------------------------
In call by reference, original value is modified because we pass reference (address).
Here, address of the value is passed in the function, so actual and formal arguments share the same address space. 
Hence, value changed inside the function, is reflected inside as well as outside the function.

Exmple:
#include<iostream>  
using namespace std;    
void swap(int *x, int *y)  
{  
 int swap;  
 swap=*x;  
 *x=*y;  
 *y=swap;  
}  
int main()   
{    
 int x=500, y=100;    
 swap(&x, &y);  // passing value to function  
 cout<<"Value of x is: "<<x<<endl;  
 cout<<"Value of y is: "<<y<<endl;  
 return 0;  
}    
Output:
Value of x is: 100
Value of y is: 500  

-----------------------------------Recursion---------------------------------------
When function is called within the same function
The function which calls the same function, is known as recursive function.
A function that calls itself, and doesn't perform any task after function call, is known as tail recursion
In tail recursion, we generally call the same function with return statement.
syntax:
recursionfunction(){    
recursionfunction(); //calling self function    
}    
