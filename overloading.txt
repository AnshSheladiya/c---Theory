----------------------------------------Overloading----------------------------------------
overloaded declaration is a declaration that is declared with the same name as a previously declared declaration in the same scope, 
except that both declarations have different arguments and obviously different definition.

C++ allows you to specify more than one definition for a function name or an operator in the same scope, 
which is called function overloading and operator overloading respectively.

If we create two or more members having the same name but different in number or type of parameter, it is known as C++ overloading. 

----------------------------------------function overloading----------------------------------------
having two or more function with the same name, but different in parameters is known as function overloading in C++.

The advantage of Function overloading is that it increases the readability of the program because you don't need to use different names for the same action.

Example:
#include <iostream>    
using namespace std;    
class Cal {    
    public:    
static int add(int a,int b){      
        return a + b;      
    }      
static int add(int a, int b, int c)      
    {      
        return a + b + c;      
    }      
};     
int main(void) {    
    Cal C;                                                    //     class object declaration.   
    cout<<C.add(10, 20)<<endl;      
    cout<<C.add(12, 20, 23);     
   return 0;    
}    

----------------------------------------Constructor Overloading----------------------------------------
We can have more than one constructor in a class with same name, as long as each has a different list of arguments.
This concept is known as Constructor Overloading and is quite similar to function overloading. 

Overloaded constructors have the same name (exact name of the class) and differ by number and type of arguments.
A constructor is called depending  the number and type of arguments passed.

Example:
// C++ program to illustrate
// Constructor overloading
#include <iostream>
using namespace std;

class construct
{

public:
	float area;
	
	// Constructor with no parameters
	construct()
	{
		area = 0;
	}
	
	// Constructor with two parameters
	construct(int a, int b)
	{
		area = a * b;
	}
	
	void disp()
	{
		cout<< area<< endl;
	}
};

int main()
{
	// Constructor Overloading
	// with two different constructors
	// of class name
	construct o;
	construct o2( 10, 20);
	
	o.disp();
	o2.disp();
	return 1;
}

 
